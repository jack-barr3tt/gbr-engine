// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"

	"github.com/gofiber/fiber/v2"
)

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status  string `json:"status"`
	Version string `json:"version"`
}

// HelloResponse defines model for HelloResponse.
type HelloResponse struct {
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /health)
	GetHealth(c *fiber.Ctx) error
	// Hello World endpoint
	// (GET /hello)
	GetHello(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *fiber.Ctx) error {

	return siw.Handler.GetHealth(c)
}

// GetHello operation middleware
func (siw *ServerInterfaceWrapper) GetHello(c *fiber.Ctx) error {

	return siw.Handler.GetHello(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/health", wrapper.GetHealth)

	router.Get(options.BaseURL+"/hello", wrapper.GetHello)

}
