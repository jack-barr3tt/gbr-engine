// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /health)
	GetHealth(c *fiber.Ctx) error
	// Get all locations
	// (GET /locations)
	GetLocations(c *fiber.Ctx) error
	// Get all operators
	// (GET /operators)
	GetOperators(c *fiber.Ctx) error
	// Query services with filters
	// (POST /services)
	QueryServices(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *fiber.Ctx) error {

	return siw.Handler.GetHealth(c)
}

// GetLocations operation middleware
func (siw *ServerInterfaceWrapper) GetLocations(c *fiber.Ctx) error {

	return siw.Handler.GetLocations(c)
}

// GetOperators operation middleware
func (siw *ServerInterfaceWrapper) GetOperators(c *fiber.Ctx) error {

	return siw.Handler.GetOperators(c)
}

// QueryServices operation middleware
func (siw *ServerInterfaceWrapper) QueryServices(c *fiber.Ctx) error {

	return siw.Handler.QueryServices(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/health", wrapper.GetHealth)

	router.Get(options.BaseURL+"/locations", wrapper.GetLocations)

	router.Get(options.BaseURL+"/operators", wrapper.GetOperators)

	router.Post(options.BaseURL+"/services", wrapper.QueryServices)

}
